{"version":3,"sources":["../dist-esnext/index.test.js"],"names":["assert","describe","it","min","max","randomNumber","ok","notOk","undefined","first","equal","list","randomItem","contains"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACAC,SAAS,MAAT,EAAiB,YAAM;AACnBA,aAAS,QAAT,EAAmB,YAAM;AACrBC,WAAG,uBAAH,EAA4B,YAAM;AAC9B,gBAAMC,MAAM,CAAZ;AACA,gBAAMC,MAAM,CAAZ;AACA,gBAAMC,eAAe,mBAAOF,GAAP,EAAYC,GAAZ,CAArB;AACAJ,mBAAOM,EAAP,CAAUD,gBAAgBF,GAA1B,EAA+B,mBAAmBE,YAAnB,GAAkC,QAAlC,GAA6CF,GAA5E;AACAH,mBAAOM,EAAP,CAAUD,gBAAgBD,GAA1B,EAA+B,mBAAmBC,YAAnB,GAAkC,QAAlC,GAA6CD,GAA5E;AACH,SAND;AAOAF,WAAG,uBAAH,EAA4B,YAAM;AAC9B,gBAAMC,MAAM,CAAZ;AACA,gBAAMC,MAAM,CAAZ;AACA,gBAAMC,eAAe,mBAAOF,GAAP,EAAYC,GAAZ,CAArB;AACAJ,mBAAOM,EAAP,CAAUD,gBAAgBF,GAA1B,EAA+B,mBAAmBE,YAAnB,GAAkC,QAAlC,GAA6CF,GAA5E;AACAH,mBAAOM,EAAP,CAAUD,gBAAgBD,GAA1B,EAA+B,mBAAmBC,YAAnB,GAAkC,QAAlC,GAA6CD,GAA5E;AACH,SAND;AAOAF,WAAG,yBAAH,EAA8B,YAAM;AAChC,gBAAMC,MAAM,CAAZ;AACA,gBAAMC,MAAM,GAAZ;AACA,gBAAMC,eAAe,mBAAOF,GAAP,EAAYC,GAAZ,CAArB;AACAJ,mBAAOM,EAAP,CAAUD,gBAAgBF,GAA1B,EAA+B,mBAAmBE,YAAnB,GAAkC,QAAlC,GAA6CF,GAA5E;AACAH,mBAAOM,EAAP,CAAUD,gBAAgBD,GAA1B,EAA+B,mBAAmBC,YAAnB,GAAkC,QAAlC,GAA6CD,GAA5E;AACH,SAND;AAOAF,WAAG,wBAAH,EAA6B,YAAM;AAC/B,gBAAMC,MAAM,CAAC,CAAb;AACA,gBAAMC,MAAM,CAAZ;AACA,gBAAMC,eAAe,mBAAOF,GAAP,EAAYC,GAAZ,CAArB;AACAJ,mBAAOM,EAAP,CAAUD,gBAAgBF,GAA1B,EAA+B,mBAAmBE,YAAnB,GAAkC,QAAlC,GAA6CF,GAA5E;AACAH,mBAAOM,EAAP,CAAUD,gBAAgBD,GAA1B,EAA+B,mBAAmBC,YAAnB,GAAkC,QAAlC,GAA6CD,GAA5E;AACH,SAND;AAOH,KA7BD;AA8BAH,aAAS,eAAT,EAA0B,YAAM;AAC5BC,WAAG,4BAAH,EAAiC,YAAM;AACnCF,mBAAOO,KAAP,CAAa,0BAAc,IAAd,CAAb;AACAP,mBAAOO,KAAP,CAAa,0BAAcC,SAAd,CAAb;AACH,SAHD;AAIAN,WAAG,uCAAH,EAA4C,YAAM;AAC9C,gBAAMO,QAAQ,OAAd;AACAT,mBAAOU,KAAP,CAAa,0BAAc,CAACD,KAAD,CAAd,CAAb,EAAqCA,KAArC;AACH,SAHD;AAIAP,WAAG,oBAAH,EAAyB,YAAM;AAC3B,gBAAMS,OAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAb;AACA,gBAAMC,aAAa,0BAAcD,IAAd,CAAnB;AACAX,mBAAOa,QAAP,CAAgBF,IAAhB,EAAsBC,UAAtB;AACH,SAJD;AAKH,KAdD;AAeH,CA9CD;AA+CA","file":"index.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { getRandomItem, random } from './index';\ndescribe('Math', () => {\n    describe('random', () => {\n        it(' 2 < randomNumber < 8', () => {\n            const min = 2;\n            const max = 8;\n            const randomNumber = random(min, max);\n            assert.ok(randomNumber >= min, 'randomNumber: ' + randomNumber + '; min:' + min);\n            assert.ok(randomNumber <= max, 'randomNumber: ' + randomNumber + '; max:' + max);\n        });\n        it(' 0 < randomNumber < 5', () => {\n            const min = 0;\n            const max = 5;\n            const randomNumber = random(min, max);\n            assert.ok(randomNumber >= min, 'randomNumber: ' + randomNumber + '; min:' + min);\n            assert.ok(randomNumber <= max, 'randomNumber: ' + randomNumber + '; max:' + max);\n        });\n        it(' 0 < randomNumber < 100', () => {\n            const min = 0;\n            const max = 100;\n            const randomNumber = random(min, max);\n            assert.ok(randomNumber >= min, 'randomNumber: ' + randomNumber + '; min:' + min);\n            assert.ok(randomNumber <= max, 'randomNumber: ' + randomNumber + '; max:' + max);\n        });\n        it(' -2 < randomNumber < 2', () => {\n            const min = -2;\n            const max = 2;\n            const randomNumber = random(min, max);\n            assert.ok(randomNumber >= min, 'randomNumber: ' + randomNumber + '; min:' + min);\n            assert.ok(randomNumber <= max, 'randomNumber: ' + randomNumber + '; max:' + max);\n        });\n    });\n    describe('getRandomItem', () => {\n        it('return null for null array', () => {\n            assert.notOk(getRandomItem(null));\n            assert.notOk(getRandomItem(undefined));\n        });\n        it('return first item when length equal 1', () => {\n            const first = 'first';\n            assert.equal(getRandomItem([first]), first);\n        });\n        it('return random item', () => {\n            const list = ['a', 'b', 'c', 'd'];\n            const randomItem = getRandomItem(list);\n            assert.contains(list, randomItem);\n        });\n    });\n});\n//# sourceMappingURL=index.test.js.map"]}